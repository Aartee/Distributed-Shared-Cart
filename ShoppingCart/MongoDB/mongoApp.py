"""
This file contains the basic crud operations required for
the shopping cart module

_id -> primary key of the collection (automatically generated by
mongoDB)
userId -> getFromUserSessions
productId -> getFromProductCatalog
productName -> getFromProductCatalog
price -> getFromProductCatalog
quantity -> get from user on GUI of shopping cart or add to cart page
"""
from pymongo import MongoClient
from bson.objectid import ObjectId
from flask import Flask,render_template,jsonify,json,request
from fabric.api import *
from pprint import pprint

app = Flask(__name__)
mongo_cluster = ("mongodb://haroon:haroon@cluster0-shard-00-00-pjkz1.mongodb.net:27017,"
                "cluster0-shard-00-01-pjkz1.mongodb.net:27017,"
                "cluster0-shard-00-02-pjkz1.mongodb.net:27017"
                "/test?ssl=true&replicaSet=Cluster0-shard-0&authSource=admin")

client = MongoClient(mongo_cluster)

#Database name
db = client["cmpe281"]

#Collection name
myCart = db["shoppingCart"]

#productId = get from frontend
productId = "59ef95771fe8881db48299b8"

#get quantity from frontend
quantity = 3

#API call to user database
userDetails = {
               "userName" : "haroonShareef"
              }

userId = userDetails["userName"]

"""
addTocart: This method adds a product to the cart
adds duplicate items
"""
def addToCart1(productId, quantity):
    #dummy details
    #APICallToProductCatalog
    #productDetails = "curl http://localhost:5000/books/"+productId

    productDetails = {
    "_id": productId,
    "title": "cracking the coding interview",
    "price": 37.95,
    "productImage": "green book with a clock"
    }

    #document to insert
    item = {}

    #Check the schema for user database
    item['userId'] = userDetails['userName']
    item['productId'] = productDetails['_id']
    item['productName'] = productDetails['title']
    item['price'] = productDetails['price']

    #check the exact attribute name for the image
    item['productImage'] = productDetails['productImage']
    item['quantity'] = quantity
    cartId = myCart.insert_one(item).inserted_id
    #print(cartId)

"""
getCartDetails: display the contents of shopping cart for the given user
    userId: user whose cart content is to be displayed
"""
def getCartDetails(userId):
    items = myCart.find({"userId":userId})
    for item in items:
        pprint(item)

"""
findProduct : returns the details of a product for
              a given user from the database
    userId    : user id for whom product details are needed
    productId : product whose details are required
"""
def findProduct(userId, productId):
    """
    NOTE: If we want to project only select few columns
    then use additional arg to find_one
    e.g. to include only userId and productId use:
    myCart.find_one({"userId":userId, "productId" : productId},
    {userId:1, productId:1, _id:0})
    """
    item = {}
    item = myCart.find_one({"userId":userId, "productId" : productId})
    pprint(type(item))
    return item


#create a method to update
"""
updateCart : This method updates the user cart
    userId:
    productId:
    newQty:

if newQty is 0 : call the delete method and remove this item from cart
"""
@application.route("/cart/<userId>/<productId>",methods=['PUT'])
def updateCart(userId, productId, newQty):
    try:
        result = json.loads(request.get_data(as_text=True))
        userId = result['userId']
        productId = result['productId']
        quantity = result['quantity']
        if newQty == 0:
            deleteProduct(userId, productId)
        else:
            myCart.update_one({"userId":userId, "productId": productId},
            {"$set": {"quantity":newQty} })
    except Exception, e:
        return jsonify(status='ERROR',message=str(e))

#write a method to delete an item from the cart
"""
deleteProduct: This method removes a product from the cart
    userId:
    productId:
"""
@application.route("/cart/<userId>/<productId>",methods=['DELETE'])
def deleteProduct(userId, productId):
    try:
        myCart.delete_one({"userId":userId, "productId" : productId})
    except Exception, e:
        return jsonify(status='ERROR',message=str(e))


#write a method to create after checking the availability in db, if already
#present update the quantity

def addToCart2(productId, quantity):
    #APICallToProductCatalog
    #productDetails = "curl http://localhost:5000/books/"+productId

    productDetails = {
    "_id": productId,
    "title": "Datastructures and algorithms made easy",
    "price": 30.41,
    "productImage": "Red and white colored book"
    }

    #document to insert
    item = findProduct(userId, productId)
    if item is not None:
        #code for update if product already exists
        updateCart(userId, productId, quantity)
        pass

    else:
        item = {}
        #Check the schema for user database
        item['userId'] = userDetails['userName']
        item['productId'] = productDetails['_id']
        item['productName'] = productDetails['title']
        item['price'] = productDetails['price']

        #check the exact attribute name for the image
        item['productImage'] = productDetails['productImage']
        item['quantity'] = quantity
        cartId = myCart.insert_one(item).inserted_id
    #write logic to return the response
    pass

@app.route('/v1/cart/', methods=['POST'])
def updateItemInCart():
    #APICallToProductCatalog
    #productDetails = "curl http://localhost:5000/books/"+productId
    """
    productDetails = {
    "_id": productId,
    "title": "Datastructures and algorithms made easy",
    "price": 30.41,
    "productImage": "Red and white colored book"
    }
    """
    myCart.update_one(
           {
            "userId":userId, "productId": productId,
            "productName": productName, "price":price,
            "productImage": productImage
           },
           {
            "$inc": {"quantity":quantity}
           },
           {
            upsert: True
           }
    )
    #document to insert
    item = findProduct(userId, productId)
    if item is not None:
        #code for update if product already exists
        updateCart(userId, productId, quantity)
        pass

    else:
        item = {}
        #Check the schema for user database
        item['userId'] = userDetails['userName']
        item['productId'] = productDetails['_id']
        item['productName'] = productDetails['title']
        item['price'] = productDetails['price']

        #check the exact attribute name for the image
        item['productImage'] = productDetails['productImage']
        item['quantity'] = quantity
        cartId = myCart.insert_one(item).inserted_id
    #write logic to return the response
    pass


if __name__ = '__main__':
    app.run()


